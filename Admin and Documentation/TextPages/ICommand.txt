<T> : ICommand {

	Action<T> _TargetExecuteMethod;
	Func<T, bool> _TargetCanExecuteMethod;
	
	public UseICommand(Action<T> executeMethod){
	  _TargetExecuteMethod = executeMethod;
	}
	
	public UseICommand(Action<T>) executeMethod, Func<T, bool> canExecuteMethod){
	  _TargetExecuteMethod = executeMethod;
	  _TargetCanExecuteMethod;
	}
	
	public void RaiseCanExecuteChanged(){
	  CanExecuteChanged(this, EventArgs.Empty);
	}

	bool ICommand.CanExecute(object parameter){
	
      if (_TargetCanexecuteMethod != null){
	    T tparm = (T)parameter;
		return _TargetCanExecuteMethod(tparm);
	  }
	
	  if (_TargetExecuteMethod != null){
		return true;
	  }
	  return false;  
	}
	
	public event EventHandler CanExecuteChanged = delegate { };
	
	void ICommand.Execute(object parameter){
	  if (_TargetExecuteMethod != null) {
	    _TargetExecuteMethod((T)parameter);
	  }
	}
  }
}  
	}
}